load("@rules_elm//proto:def.bzl", "elm_proto_library", "ELM_PROTO_TOOLCHAIN")
load("@rules_elm//proto:elm_proto_toolchain_rule.bzl", "elm_proto_toolchain")
load("@rules_elm//elm:def.bzl", "elm_test")
load("@rules_nodejs//nodejs:toolchain.bzl", "nodejs_toolchain")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_proto//proto/private/rules:proto_toolchain_rule.bzl", "proto_toolchain")

nodejs_toolchain(
    name = "node_toolchain",
    node = "@nixpkgs_nodejs//:bin/node",
    npm = "@nixpkgs_nodejs//:bin/npm",
)

toolchain(
    name = "nixpkgs_nodejs_toolchain",
    exec_compatible_with = [ "@rules_nixpkgs_core//constraints:support_nix" ],
    toolchain = ":node_toolchain",
    toolchain_type = "@rules_nodejs//nodejs:toolchain_type",
)

proto_toolchain(
    name = "nixpkgs_protoc_toolchain",
    proto_compiler = "@nixpkgs_protobuf//:bin/protoc",
    visibility = ["//visibility:public"],
)

toolchain(
    name = "nixpkgs_protobuf_toolchain",
    toolchain_type = "@rules_proto//proto:toolchain_type",
    exec_compatible_with = [
        "@rules_nixpkgs_core//constraints:support_nix"
    ],
    toolchain = ":nixpkgs_protoc_toolchain",
)

elm_proto_toolchain(
    name = "elm_proto_toolchain_opt_json",
    proto_compiler = "@nixpkgs_protobuf//:bin/protoc",
    deps = [
        "@elm_package_eriktim_elm_protocol_buffers",
        "@elm_package_anmolitor_elm_protoc_types",
        "@elm_package_danfishgold_base64_bytes",
        "@elm_package_elm_file",
        "@elm_package_elm_http",
        "@elm_package_elm_parser",
        "@elm_package_anmolitor_elm_protoc_utils",
        "@elm_package_rtfeldman_elm_iso8601_date_strings",
    ]
)

toolchain(
    name = "nixpkgs_elm_protobuf_toolchain",
    toolchain_type = ELM_PROTO_TOOLCHAIN,
    exec_compatible_with = [ "@rules_nixpkgs_core//constraints:support_nix" ],
    toolchain = ":elm_proto_toolchain_opt_json",
)

proto_library(
    name = "book_proto",
    srcs = [ "book.proto" ],
    visibility = ["//visibility:public"],
)

elm_proto_library(
    name = "elm_book_proto",
    proto = ":book_proto",
    plugin_opt_json = "json=decode",
)

elm_test(
    name = "spec",
    main = "Spec.elm",
    deps = [
        ":elm_book_proto",
        "@elm_package_elm_test",
    ]
)

