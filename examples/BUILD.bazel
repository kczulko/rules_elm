load("@com_github_edschouten_rules_elm//examples:defs.bzl",
     "rules_elm_integration_test_each_bazel",
     "gen_test_names_each",
)

bazel_binaries = {
    "bazel6" : "@bazel6//:bin/bazel",
    "bazel7" : "@bazel7//:bin/bazel",
}

sh_binary(
    name = "output_match_runner",
    testonly = True,
    srcs = ["output_match_runner.sh"],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
        "@cgrindel_bazel_starlib//shlib/lib:assertions",
    ],
)

rules_elm_integration_test_each_bazel(
    name = "elm_binary",
    bazel_binaries = bazel_binaries,
    workspace_path = "elm-binary",
    bazel_cmd = "build :main",
    expected_output = "INFO: Build completed successfully, 4 total actions",
)

rules_elm_integration_test_each_bazel(
    name = "elm_binary_opt",
    bazel_binaries = bazel_binaries,
    workspace_path = "elm-binary",
    bazel_cmd = "build :main -c opt",
    expected_output = """(UglifyJS main.2.js)?.*
INFO: Build completed successfully, 12 total actions""",
)

rules_elm_integration_test_each_bazel(
    name = "elm_binary_no_deps_negative",
    bazel_binaries = bazel_binaries,
    workspace_path = "elm-binary",
    bazel_cmd = "build :main-no-deps",
    expected_output = """-- MISSING DEPENDENCY ------------------------------------------------- elm.json

I need to see an "elm/core" dependency your elm.json file. The default imports
of `List` and `Maybe` do not work without it.

If you modified your elm.json by hand, try to change it back! And if you are
having trouble getting back to a working elm.json, it may be easier to delete it
and use `elm init` to start fresh.

ERROR:""",
)

rules_elm_integration_test_each_bazel(
    name = "elm_todo_mvc",
    bazel_binaries = bazel_binaries,
    test_runner = ":output_match_runner",
    workspace_path = "elm-todomvc",
    bazel_cmd = "build :bin",
    expected_output = """INFO: Build completed successfully, 4 total actions""",
)

rules_elm_integration_test_each_bazel(
    name = "elm_test",
    bazel_binaries = bazel_binaries,
    test_runner = ":output_match_runner",
    workspace_path = "elm-test",
    bazel_cmd = "test :spec --test_output=all",
    expected_output = """TEST RUN PASSED

Duration: 0 ms
Passed:   4
Failed:   0""",
)

rules_elm_integration_test_each_bazel(
    name = "elm_proto",
    bazel_binaries = bazel_binaries,
    test_runner = ":output_match_runner",
    workspace_path = "elm-proto",
    bazel_cmd = "test :spec_proto --test_output=all",
    expected_output = """TEST RUN PASSED

Duration: 0 ms
Passed:   2
Failed:   0""",
)

# bazel7 cmd:
# bazel query 'attr("tags", "[\[ ]bazel7[,\]]", deps("//examples:integration_tests"))' | xargs -L1 bazel run --config=nix
# bazel6 cmd:
# bazel test //examples:integration_tests --config=nix --test_tag_filters=bazel6
test_suite(
    name = "integration_tests",
    tests = gen_test_names_each(
        name_prefixes = [
            "elm_binary",
            "elm_binary_no_deps_negative",
            "elm_binary_opt",
            "elm_proto",
            "elm_test",
            "elm_todo_mvc",
        ],
        bazel_binaries = bazel_binaries,
    ),
    visibility = ["//:__subpackages__"],
)
