load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load(
    "@rules_elm//examples:defs.bzl",
    "gen_test_names_each",
    "rules_elm_integration_test",
    "rules_elm_integration_test_each_bazel",
)

bazel_binaries = {
    "bazel8": "@bazel8//:bin/bazel",
    "bazel7": "@bazel7//:bin/bazel",
}

sh_binary(
    name = "output_match_runner",
    testonly = True,
    srcs = ["output_match_runner.sh"],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
        "@cgrindel_bazel_starlib//shlib/lib:assertions",
    ],
)

rules_elm_integration_test_each_bazel(
    name = "elm_binary",
    timeout = "moderate",
    bazel_binaries = bazel_binaries,
    bazel_cmd = "build :main",
    expected_output = "INFO: Build completed successfully, .. total actions",
    # sometimes it fails with an error:
    # 0.19.1/d.dat: openBinaryFile: resource busy (file is locked)
    flaky = True,
    workspace_path = "elm-binary",
)

rules_elm_integration_test_each_bazel(
    name = "elm_binary_opt",
    timeout = "moderate",
    bazel_binaries = bazel_binaries,
    bazel_cmd = "build :main -c opt",
    expected_output = """(UglifyJS main.2.js)?.*
INFO: Build completed successfully, .. total actions""",
    flaky = True,
    workspace_path = "elm-binary",
)

rules_elm_integration_test_each_bazel(
    name = "elm_binary_no_deps_negative",
    timeout = "moderate",
    bazel_binaries = bazel_binaries,
    bazel_cmd = "build :main-no-deps",
    expected_output = """-- MISSING DEPENDENCY ------------------------------------------------- elm.json

I need to see an "elm/core" dependency your elm.json file. The default imports
of `List` and `Maybe` do not work without it.

If you modified your elm.json by hand, try to change it back! And if you are
having trouble getting back to a working elm.json, it may be easier to delete it
and use `elm init` to start fresh.""",
    workspace_path = "elm-binary",
)

rules_elm_integration_test_each_bazel(
    name = "elm_todomvc",
    timeout = "moderate",
    bazel_binaries = bazel_binaries,
    bazel_cmd = "build :bin",
    expected_output = """INFO: Build completed successfully, .. total actions""",
    test_runner = ":output_match_runner",
    workspace_path = "elm-todomvc",
)

rules_elm_integration_test_each_bazel(
    name = "elm_test",
    timeout = "moderate",
    bazel_binaries = bazel_binaries,
    bazel_cmd = "test :spec --test_output=all",
    expected_output = """TEST RUN PASSED

Duration: 0 ms
Passed:   4
Failed:   0""",
    test_runner = ":output_match_runner",
    workspace_path = "elm-test",
)

rules_elm_integration_test_each_bazel(
    name = "elm_proto_simple",
    timeout = "moderate",
    bazel_binaries = bazel_binaries,
    bazel_cmd = "test :spec --test_output=all",
    expected_output = """TEST RUN PASSED

Duration: 0 ms
Passed:   2
Failed:   0""",
    test_runner = ":output_match_runner",
    workspace_path = "elm-proto",
)

rules_elm_integration_test_each_bazel(
    name = "elm_proto_complex",
    timeout = "moderate",
    bazel_binaries = bazel_binaries,
    bazel_cmd = "test //foo:spec --test_output=all",
    expected_output = """TEST RUN PASSED

Duration: 0 ms
Passed:   1
Failed:   0""",
    test_runner = ":output_match_runner",
    workspace_path = "elm-proto",
)

test_suite(
    name = "integration_tests",
    tests = gen_test_names_each(
        bazel_binaries = bazel_binaries,
        name_prefixes = [
            "elm_binary",
            "elm_binary_no_deps_negative",
            "elm_binary_opt",
            "elm_proto_complex",
            "elm_proto_simple",
            "elm_test",
            "elm_todomvc",
        ],
    ),
    visibility = ["//:__subpackages__"],
)

bzl_library(
    name = "defs",
    srcs = ["defs.bzl"],
    visibility = ["//visibility:public"],
    deps = ["@rules_bazel_integration_test//bazel_integration_test:defs"],
)
